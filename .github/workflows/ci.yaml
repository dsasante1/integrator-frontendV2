name: integrator_frontend

on:
  pull_request:
    types:
      - closed
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: 'npm'
          
      - name: Install all dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Debug build output
        run: |
          echo "Checking dist structure:"
          ls -la dist/
          echo "Checking dist/client contents:"
          ls -la dist/client/ || echo "dist/client not found"
          echo "Checking dist/server contents:"  
          ls -la dist/server/ || echo "dist/server not found"
          echo "Looking for HTML files in dist:"
          find dist/ -name "*.html" -type f || echo "No HTML files found in dist"
          
      - name: Deploy integrator frontend (SSR) to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          timeout: 300s
          command_timeout: 600s
          script: |
            # Set error handling and debugging
            set -e
            echo "Starting deployment at $(date)"
            echo "Current user: $(whoami)"
            echo "Home directory: $HOME"
            
            # Check if Node.js and npm are available
            echo "Checking Node.js and npm availability..."
            if ! command -v node &> /dev/null; then
              echo "ERROR: Node.js is not installed or not in PATH"
              exit 1
            fi
            
            if ! command -v npm &> /dev/null; then
              echo "ERROR: npm is not installed or not in PATH"
              echo "Please reinstall Node.js with npm"
              exit 1
            fi
            
            # Check Node.js version
            echo "Checking Node.js version..."
            node --version
            npm --version
            
            # Verify Node.js version meets requirements
            NODE_VERSION=$(node --version | cut -d'v' -f2)
            REQUIRED_MAJOR=18
            REQUIRED_MINOR=20
            REQUIRED_PATCH=8
            
            IFS='.' read -r MAJOR MINOR PATCH <<< "$NODE_VERSION"
            
            if [ "$MAJOR" -lt "$REQUIRED_MAJOR" ] || 
               ([ "$MAJOR" -eq "$REQUIRED_MAJOR" ] && [ "$MINOR" -lt "$REQUIRED_MINOR" ]) ||
               ([ "$MAJOR" -eq "$REQUIRED_MAJOR" ] && [ "$MINOR" -eq "$REQUIRED_MINOR" ] && [ "$PATCH" -lt "$REQUIRED_PATCH" ]); then
              echo "ERROR: Node.js version $NODE_VERSION is not supported!"
              echo "Required: >= ${REQUIRED_MAJOR}.${REQUIRED_MINOR}.${REQUIRED_PATCH}"
              echo "Please upgrade Node.js on your VPS"
              exit 1
            fi
            
            echo "Node.js and npm checks passed âœ“"
            
            # Use home directory instead of /var/www to avoid sudo
            APP_BASE="$HOME/apps"
            APP_DIR="$APP_BASE/integrator_frontend"
            DEPLOY_DIR="$APP_BASE/integrator_frontend_live"
            LOG_FILE="$HOME/integrator_frontend.log"
            
            # Create base apps directory
            mkdir -p "$APP_BASE"
            
            # Check if application directory exists, create if not
            if [ ! -d "$APP_DIR" ]; then
              echo "Creating application directory at $APP_DIR..."
              mkdir -p "$APP_DIR"
              cd "$APP_DIR"
              
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo "Application directory exists, navigating..."
              cd "$APP_DIR"
            fi
            
            echo "Current directory: $(pwd)"
            
            echo "Pulling latest changes..."
            git fetch origin
            git reset --hard origin/master
            
            echo "Installing/updating dependencies..."
            npm ci --only=production --no-audit --no-fund
            
            echo "Building application on VPS..."
            npm run build
            
            echo "Verifying build output..."
            if [ ! -d "dist" ]; then
              echo "Build failed - no dist directory found!"
              exit 1
            fi
            ls -la dist/
            
            echo "Creating temporary directory for atomic deployment..."
            TEMP_DIR="/tmp/integrator_frontend-$(date +%s)"
            mkdir -p "$TEMP_DIR"
            
            echo "Copying application files to temp directory..."
            # Copy the entire dist directory for SSR
            cp -r dist/ "$TEMP_DIR/"
            # Copy package files for production dependencies
            cp package.json package-lock.json "$TEMP_DIR/"
            
            echo "Installing production dependencies in temp directory..."
            cd "$TEMP_DIR"
            npm ci --only=production --no-audit --no-fund
            cd "$APP_DIR"
            
            echo "Setting proper permissions..."
            chmod -R 755 "$TEMP_DIR"
            
            echo "Stopping existing application if running..."
            pkill -f "node.*integrator_frontend" || echo "No integrator_frontend process found"
            pkill -f "node.*entry.mjs" || echo "No entry.mjs process found"
            
            # Wait for processes to fully stop
            sleep 3
            
            echo "Performing atomic deployment swap..."
            
            # Backup existing deployment if it exists
            if [ -d "$DEPLOY_DIR" ]; then
              BACKUP_DIR="$APP_BASE/integrator_frontend-backup-$(date +%s)"
              echo "Backing up current deployment to $BACKUP_DIR"
              mv "$DEPLOY_DIR" "$BACKUP_DIR"
            fi
            
            # Move new deployment into place
            echo "Moving new deployment to $DEPLOY_DIR"
            mv "$TEMP_DIR" "$DEPLOY_DIR"
            
            # Clean up old backups (keep last 3)
            cd "$APP_BASE"
            echo "Cleaning up old backups..."
            find . -maxdepth 1 -name "integrator_frontend-backup-*" -type d | sort -r | tail -n +4 | xargs -r rm -rf
            
            echo "Starting the application..."
            cd "$DEPLOY_DIR"
            
            # Verify required files exist
            if [ ! -f "dist/server/entry.mjs" ]; then
              echo "Error: entry.mjs not found!"
              echo "Contents of dist/server/:"
              ls -la dist/server/ || echo "dist/server directory not found"
              exit 1
            fi
            
            # Test application response with retries
            echo "Testing application response..."
            for i in {1..5}; do
              if curl -f -s http://localhost:4321 > /dev/null; then
                echo "Application is responding successfully!"
                break
              else
                echo "Attempt $i: Application not responding, waiting 5 seconds..."
                if [ $i -eq 5 ]; then
                  echo "Application failed to respond after 5 attempts!"
                  echo "Recent logs:"
                  tail -20 "$LOG_FILE"
                  echo "Process status:"
                  ps aux | grep node || echo "No node processes found"
                  exit 1
                fi
                sleep 5
              fi
            done
            
            echo "SSR deployment completed successfully at $(date)"
            echo "Application running in: $DEPLOY_DIR"
            echo "Logs available at: $LOG_FILE"
            echo "Server PID: $(pgrep -f 'node.*entry.mjs' || echo 'PID not found')"
            
      - name: Cleanup on vps
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          timeout: 60s
          script: |
            # Clean up temporary files
            echo "Cleaning up temporary files..."
            rm -rf /tmp/integrator_frontend-* || echo "No temp files to clean"
            
            # Show final status
            echo "Final application status:"
            ps aux | grep -E "(node|integrator)" | grep -v grep || echo "No application processes found"
            echo "Application directory: $HOME/apps/integrator_frontend_live"
            echo "Log file: $HOME/integrator_frontend.log"