name: integrator_frontend
on:
  pull_request:
    types:
      - closed
    branches:
      - master
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: integrator_frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Debug build output
        run: |
          echo "Checking dist structure:"
          ls -la dist/
          echo "Checking dist/client contents:"
          ls -la dist/client/ || echo "dist/client not found"
          echo "Checking dist/server contents:"  
          ls -la dist/server/ || echo "dist/server not found"
          echo "Looking for HTML files in dist:"
          find dist/ -name "*.html" -type f || echo "No HTML files found in dist"
      - name: Deploy integrator frontend (SSR)
        run: |
          # Set error handling
          set -e
          echo "Creating temporary directory..."
          TEMP_DIR="/tmp/integrator_frontend-$(date +%s)"
          mkdir -p $TEMP_DIR
          
          echo "Copying SSR application files..."
          # Copy the entire dist directory for SSR
          cp -r dist/ $TEMP_DIR/
          # Copy package.json and package-lock.json for production dependencies
          cp package.json package-lock.json $TEMP_DIR/
          
          echo "Installing production dependencies..."
          cd $TEMP_DIR
          npm ci --only=production
          cd -
          
          echo "Setting proper permissions..."
          sudo chown -R www-data:www-data $TEMP_DIR
          sudo chmod -R 755 $TEMP_DIR
          
          echo "Stopping existing application if running..."
          sudo pkill -f "node.*integrator_frontend" || echo "No existing process found"
          
          echo "Performing atomic deployment swap..."
          sudo -s <<EOF
          # Backup existing deployment if it exists
          if [ -d "/var/www/integrator_frontend" ]; then
            mv /var/www/integrator_frontend "/var/www/integrator_frontend-backup-$(date +%s)"
          fi
          # Move new deployment into place
          mv $TEMP_DIR /var/www/integrator_frontend
          # Clean up old backups (keep last 2)
          cd /var/www && ls -td integrator_frontend-backup-* | tail -n +3 | xargs -r rm -rf
          EOF
          
          echo "Starting the application..."
          cd /var/www/integrator_frontend
          # Start the application in the background
          sudo -u www-data nohup node dist/server/entry.mjs > /var/log/integrator_frontend.log 2>&1 &
          
          echo "Verifying deployment..."
          sleep 5
          if ! pgrep -f "node.*entry.mjs" > /dev/null; then
            echo "Application failed to start! Check logs:"
            tail -20 /var/log/integrator_frontend.log
            exit 1
          fi
          
          echo "Testing application response..."
          if ! curl -f http://localhost:4321 > /dev/null 2>&1; then
            echo "Application not responding on port 4321!"
            exit 1
          fi
          
          echo "SSR deployment completed successfully at $(date)"
      - name: Cleanup
        if: always()
        run: |
          # Clean up temporary files if they exist
          rm -rf /tmp/integrator_frontend-*